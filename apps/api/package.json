{
  "name": "@repo/api",
  "version": "1.0.0",
  "main": "dist/index.js",
  "scripts": {
    "postinstall": "echo \"Environment check: VERCEL=$VERCEL, RENDER=$RENDER, CI=$CI, RENDER_SERVICE_ID=$RENDER_SERVICE_ID\" && if [ \"$VERCEL\" = \"1\" ] || [ \"$RENDER\" = \"1\" ] || [ \"$CI\" = \"true\" ] || [ -n \"$RENDER_SERVICE_ID\" ]; then echo \"Skipping migrations in deployment environment\"; exit 0; fi && if [ -e .env ]; then echo \".env exists\"; else echo \".env not found, copying .env.example\"; cp .env.example .env; fi && echo \"Setting up SQLite database...\" && pnpm migrate",
    "typeorm": "typeorm-ts-node-commonjs",
    "build": "tsc && mkdir -p dist/src/views && cp -R src/views/* dist/src/views/",
    "dev": "ts-node-dev --respawn --transpile-only -r tsconfig-paths/register src/index.ts",
    "test": "export NODE_ENV=test && jest --runInBand",
    "start": "export NODE_ENV=production && npm rebuild sqlite3 && tsc && export NODE_ENV=development && pnpm migrate && pnpm seed && export NODE_ENV=production && TS_NODE_BASEURL=./dist node -r tsconfig-paths/register ./dist/src/index.js",
    "fmt": "prettier --config .prettierrc 'src/**/*.ts' 'tests/**/*.ts' --write",
    "entity:make": "cd src/database/sql/entities/ && typeorm-ts-node-commonjs entity:create",
    "migrate:make": "cd src/database/sql/migrations/ && typeorm-ts-node-commonjs migration:create",
    "migrate": "export NODE_ENV=development && typeorm-ts-node-commonjs migration:run -d src/database/sql/data-source.ts",
    "migrate:rollback": "export NODE_ENV=development && typeorm-ts-node-commonjs migration:revert -d src/database/sql/data-source.ts",
    "migrate:fresh": "export NODE_ENV=development && ts-node -r tsconfig-paths/register src/scripts/fresh.ts",
    "seed": "export NODE_ENV=development && ts-node -r tsconfig-paths/register src/scripts/seed.ts",
    "clean": "rm -rf dist"
  },
  "dependencies": {
    "@bull-board/api": "^6.12.0",
    "@bull-board/express": "^6.12.0",
    "@repo/shared": "workspace:*",
    "bcryptjs": "^3.0.2",
    "bullmq": "^5.12.15",
    "class-transformer": "^0.5.1",
    "class-validator": "^0.14.1",
    "connect-flash": "^0.1.1",
    "connect-redis": "^6.1.3",
    "cookie-parser": "^1.4.6",
    "cors": "^2.8.5",
    "date-fns": "^3.6.0",
    "dotenv": "^16.4.5",
    "ejs": "^3.1.10",
    "express": "^4.19.2",
    "express-rate-limit": "^7.4.0",
    "express-session": "^1.18.0",
    "express-validator": "^7.2.0",
    "helmet": "^8.1.0",
    "ioredis": "^5.4.1",
    "jsonwebtoken": "^9.0.2",
    "lodash": "^4.17.21",
    "method-override": "^3.0.0",
    "mongoose": "^8.6.1",
    "morgan": "^1.10.0",
    "multer": "^2.0.2",
    "mysql2": "^3.11.0",
    "nodemailer": "^6.9.14",
    "passport": "^0.7.0",
    "passport-jwt": "^4.0.1",
    "passport-local": "^1.0.0",
    "pg": "^8.12.0",
    "reflect-metadata": "^0.2.2",
    "routing-controllers": "^0.10.4",
    "sqlite3": "^5.1.7",
    "typedi": "^0.10.0",
    "typeorm": "^0.3.20",
    "typeorm-naming-strategies": "^4.1.0",
    "winston": "^3.14.2"
  },
  "devDependencies": {
    "@faker-js/faker": "^8.4.1",
    "@jest/globals": "^30.0.5",
    "@types/connect-flash": "^0.0.40",
    "@types/connect-redis": "^0.0.23",
    "@types/cookie-parser": "^1.4.7",
    "@types/cors": "^2.8.17",
    "@types/express": "^4.17.21",
    "@types/express-session": "^1.18.2",
    "@types/jest": "^29.5.14",
    "@types/jsonwebtoken": "^9.0.6",
    "@types/method-override": "^0.0.35",
    "@types/morgan": "^1.9.9",
    "@types/multer": "^2.0.0",
    "@types/node": "^22.5.0",
    "@types/nodemailer": "^6.4.15",
    "@types/passport": "^1.0.16",
    "@types/passport-jwt": "^4.0.1",
    "@types/passport-local": "^1.0.38",
    "@types/supertest": "^6.0.2",
    "ioredis-mock": "^8.9.0",
    "jest": "^29.7.0",
    "nodemon": "^3.1.4",
    "prettier": "^3.3.3",
    "supertest": "^7.0.0",
    "ts-jest": "^29.2.4",
    "ts-node": "^10.9.2",
    "ts-node-dev": "^2.0.0",
    "tsconfig-paths": "^4.2.0",
    "typescript": "^5.5.4"
  }
}
